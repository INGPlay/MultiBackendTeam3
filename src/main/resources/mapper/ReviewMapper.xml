<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.plan.tour.review.mapper.ReviewMapper">

    <!--  게시글 추가  -->
    <insert id="insertReview" parameterType="com.plan.tour.review.vo.ReviewVO">
        <selectKey keyProperty="review_id" resultType="_int" order="BEFORE">
            select TO_NUMBER(Review_Sequence.nextval) from dual
        </selectKey>
        insert into review(review_id, user_id, review_title, review_content, create_date, update_date, review_views, review_recommends,contentId,filename,originFilename,filesize)
        values(#{review_id}, #{user_id},#{review_title},#{review_content},SYSDATE,SYSDATE,0,0,#{contentId},#{filename},#{originFilename},#{filesize})
    </insert>

    <select id ="checkContentName" parameterType="_int" resultType="_int">
        select count(contentId) from place where contentId=#{contentId}
    </select>

    <!-- place 테이블 추가-->
    <insert id="insertPlace" parameterType="com.plan.tour.review.vo.PlaceVO">
        insert into place(CONTENTID, CONTENTNAME) values(#{contentId},#{contentName})
    </insert>

    <!-- contentId로 contentName 가져오기-->
    <select id="getPlaceName" parameterType="_int" resultType="String">
        select CONTENTNAME from place where contentId=#{contentId}
    </select>

    <!-- 사용자 이름으로 사용자 계정 존재 유무 가져오기    -->
    <select id="isUser" resultType="_int" parameterType="String">
        select count(user_id) from MemberUser
        where user_name IN #{user_name}
    </select>

    <!-- 사용자 이름으로 사용자 계정 번호 가져오기   -->
    <select id="getUserId" resultType="_int" parameterType="String">
        select user_id from MemberUser where user_name = #{user_name}
    </select>


    <!-- 총 게시글 수 가져오기-->
    <select id="getTotalCount" resultType="_int">
        select count(review_id) from review
    </select>

    <!-- 모든 게시글 가져오기   -->
    <select id="selectReviewAll" resultType="com.plan.tour.review.vo.ReviewVO">
        select review_id, user_id, review_title, review_content, create_date, update_date, review_views, review_recommends, contentName
        from review_vi
    </select>

    <!-- 특정 게시글 가져오기   -->
    <select id="selectReviewOne" resultType="com.plan.tour.review.vo.ReviewVO" parameterType="_int">
        select m.user_name, r.review_id, r.user_id, r.review_title, r.review_content, r.create_date, r.update_date, r.review_views, r.review_recommends, r.contentId, r.filename, r.originFilename, r.filesize
        from review r
        join memberuser m
        on r.user_id=m.user_id
        where review_id=#{id}
    </select>

    <!--  특정 게시글 삭제하기  -->
    <delete id="deleteReview" parameterType="_int">
        delete from review where review_id=#{id}
    </delete>

    <!-- 특정 게시글 수정하기-->
    <update id="updateReview" parameterType="com.plan.tour.review.vo.ReviewVO">
        update review set REVIEW_TITLE=#{review_title}, REVIEW_CONTENT=#{review_content}, UPDATE_DATE = SYSDATE, FILENAME=#{filename},ORIGINFILENAME=#{originFilename},FILESIZE=#{filesize}
        where REVIEW_ID=#{review_id}
    </update>

    <select id="getListWithPaging" resultType="com.plan.tour.review.vo.ReviewVO">
        select review_id,user_id,user_name, review_title, review_content, create_date, update_date, review_views,review_recommends, contentName
        from (select rownum rn, review_id,user_id,user_name, review_title, review_content, create_date, update_date, review_views,review_recommends, contentName
        from (select * from review_vi where 1=1
            <if test='searchType!=null || searchType != " "'>
                <if test="searchType==1">
                    and REVIEW_TITLE like '%'||#{keyword} ||'%'
                </if>
                <if test="searchType==2">
                    and USER_NAME like '%'||#{keyword} ||'%'
                </if>
                <if test="searchType==3">
                    and CONTENTID in
                    <foreach collection="contentId" item="i" separator="," open="(" close=")">
                        #{i}
                    </foreach>
                </if>
                <if test="searchType==4">
                    and 2=1
                </if>
            </if>
        <if test="cri.sort == 1">
            order by review_id desc
        </if>
        <if test="cri.sort == 2">
            order by REVIEW_VIEWS desc ,review_id desc
        </if>
        <if test="cri.sort == 3">
        order by REVIEW_RECOMMENDS desc,review_id desc
         </if>
        ))
        <![CDATA[
        where rn> (#{cri.pageNum}-1)* #{cri.amount} and rn <= #{cri.pageNum} * #{cri.amount}
        ]]>
    </select>

    <!-- 게시글 클릭시 조회수 증가-->
    <update id="updateReview_views" parameterType="com.plan.tour.review.vo.ReviewVO">
        update review set review_views = #{review_views}+1 where REVIEW_ID=#{review_id}
    </update>

    <!-- 추천 버튼 클릭시 추천수 증가-->
    <update id="updateReview_recommends" parameterType="com.plan.tour.review.vo.ReviewVO">
        update review set
        <if test="i==1">
        review_recommends = #{vo.review_recommends}+1
        </if>
        <if test="i==2">
        review_recommends = #{vo.review_recommends}-1
        </if>
        where review_id=#{vo.review_id}

    </update>


    <!-- 댓글 추가 -->
    <insert id="insert_recommends" parameterType="com.plan.tour.review.vo.Review_CommentVO">
        <selectKey keyProperty="comment_id" resultType="_int" order="BEFORE">
            select TO_NUMBER(Review_Comment_Sequence.nextval) from dual
        </selectKey>
        insert into Review_Comment(comment_id, review_id, create_date, update_date, content, comment_group, comment_depth, user_id)
        values(#{comment_id}, #{review_id},SYSDATE,SYSDATE,#{content},#{comment_id},0,#{user_id})
    </insert>


    <!-- 해당 게시글 댓글 조회   -->
    <select id="selectReviewComment" resultType="com.plan.tour.review.vo.Review_CommentVO" parameterType="_int" >
        select comment_id, review_id, create_date, update_date, content, comment_group, comment_depth, user_id, user_name
        from comment_vi where review_id = #{review_id} order by
        <if test="sort == 1">
            comment_group asc, comment_depth asc
        </if>
        <if test="sort == 2">
            comment_group desc, comment_depth desc
    </if>
    </select>

    <!-- 댓글 삭제 -->
    <delete parameterType="_int" id="deleteComment">
        delete from review_comment where comment_id=#{id}
    </delete>

    <!-- 특정 댓글 찾기-->
    <select id="findReComment" parameterType="_int" resultType="com.plan.tour.review.vo.Review_CommentVO">
        select * from review_comment where comment_id=#{id}

    </select>

    <!-- 대댓글 추가하기 -->

    <insert id="insertRerecomment" parameterType="com.plan.tour.review.vo.Review_CommentVO">
        <selectKey keyProperty="comment_id" resultType="_int" order="BEFORE">
            select TO_NUMBER(Review_Comment_Sequence.nextval) from dual
        </selectKey>
        insert into Review_Comment(comment_id, review_id, create_date, update_date, content, comment_group, comment_depth, user_id)
        values(#{comment_id}, #{review_id},SYSDATE,SYSDATE,#{content},#{comment_group},#{comment_depth},#{user_id})
    </insert>

    <!-- 원본 댓글 깊이 증가-->

    <update id="update_comment_group" parameterType="com.plan.tour.review.vo.Review_CommentVO">
        update Review_Comment set COMMENT_DEPTH = COMMENT_DEPTH+1 where comment_group=#{comment_group}
    </update>

    <select id="getTotalRecommentCount" resultType="_int" parameterType="_int">
        select count(comment_id) from Review_comment where comment_group = #{comment_group}
    </select>

    <!-- 장소 id 존재 여부 확인-->
    <select id="checkPlaceId" parameterType="String" resultType="_int">
        select count(CONTENTID) from place where CONTENTNAME like '%'||#{contentName}||'%'
    </select>

    <!-- 장소 id 가져오기 확인-->
    <select id="getPlaceId" parameterType="String" resultType="com.plan.tour.review.vo.PlaceVO">
        select distinct CONTENTID, contentName from place where CONTENTNAME like '%'||#{contentName}||'%'
    </select>

    <!-- 제목, 글쓴이 정보 총 개수 가져오기-->
    <select id="getSearchTotalCount" parameterType="String" resultType="_int">
        select count(review_id) from review_vi
        <if test="searchType == 1">
        where REVIEW_TITLE like '%'||#{keyword}||'%'
        </if>
        <if test="searchType==2">
        where USER_NAME like '%'|| #{keyword}||'%'
        </if>
        <if test="searchType==3">
            where
        </if>
    </select>


    <select id="getSearchPlaceTotalCount" parameterType="com.plan.tour.review.vo.ResponseVO" resultType="_int">
        select count(review_id) from review_vi
            where CONTENTID in
            <foreach collection="contentId" item="i" separator="," open="(" close=")">
                #{i}
            </foreach>
    </select>

    <select id="getTotalRecomment" resultType="_int" parameterType="_int">
        select count(comment_id) from comment_vi where review_id = #{reviewId}
    </select>

    <!---->
    <select id="selectRecommentCheck" parameterType="_int" resultType="_int">
        select count(recommends) from review_recommends where review_id=#{review_id} and user_id = #{user_id}
    </select>

    <!---->
    <insert id="insert_Review_recommend" parameterType="_int">
        <selectKey keyProperty="recommend" resultType="_int" order="BEFORE">
            select TO_NUMBER(recommend_id.nextval) from dual
        </selectKey>
        insert into review_recommends(recommends,review_id,user_id) values(#{recommend},#{review_id},#{user_id})
    </insert>

    <!---->

    <delete id="delete_Review_recommend" parameterType="_int">
        delete from review_recommends where review_id=#{review_id} and user_id = #{user_id}
    </delete>
</mapper>



